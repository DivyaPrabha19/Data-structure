#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define V 6  // Number of nodes, can be changed dynamically

int minDistance(int dist[], int visited[]) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++) {
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

void dijkstra(int graph[V][V], int src) {
    int dist[V];
    int visited[V] = {0};

    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
    }
    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, visited);
        visited[u] = 1;

        for (int v = 0; v < V; v++) {
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    printf("Node\tDistance from Source\n");
    for (int i = 0; i < V; i++) {
        printf("%d\t%d\n", i, dist[i]);
    }
}

void updateRoute(int graph[V][V], int u, int v, int weight) {
    graph[u][v] = weight;
    graph[v][u] = weight;  // Assuming undirected graph for bi-directional routes
}

int main() {
    int graph[V][V] = {
        {0, 7, 9, 0, 0, 14},
        {7, 0, 10, 15, 0, 0},
        {9, 10, 0, 11, 0, 2},
        {0, 15, 11, 0, 6, 0},
        {0, 0, 0, 6, 0, 9},
        {14, 0, 2, 0, 9, 0}
    };

    int src;
    printf("Enter starting node (0 to %d): ", V - 1);
    scanf("%d", &src);

    dijkstra(graph, src);

    // Demonstrate dynamic route updates
    int u, v, weight;
    printf("Enter route to update (u v weight): ");
    scanf("%d %d %d", &u, &v, &weight);

    updateRoute(graph, u, v, weight);
    printf("\nUpdated shortest path distances from node %d:\n", src);
    dijkstra(graph, src);

    return 0;
}
OUTPUT:
Enter starting node (0 to 5): 0
Node	Distance from Source
0	0
1	7
2	9
3	20
4	20
5	11

Enter route to update (u v weight): 1 3 5

Updated shortest path distances from node 0:
Node	Distance from Source
0	0
1	7
2	9
3	12
4	18
5	11
