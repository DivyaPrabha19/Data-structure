#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define V 5  // Number of locations (can be dynamically allocated in a more extensive system)

int minDistance(int dist[], int visited[]) {
    int min = INT_MAX, min_index;
    for (int v = 0; v < V; v++) {
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

void dijkstra(int graph[V][V], int src) {
    int dist[V];
    int visited[V] = {0};

    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
    }
    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, visited);
        visited[u] = 1;

        for (int v = 0; v < V; v++) {
            if (!visited[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    printf("Location\tDistance from Source\n");
    for (int i = 0; i < V; i++) {
        printf("%d\t\t%d\n", i, dist[i]);
    }
}

int main() {
    int graph[V][V] = {
        {0, 10, 0, 0, 5},
        {10, 0, 3, 0, 2},
        {0, 3, 0, 4, 0},
        {0, 0, 4, 0, 7},
        {5, 2, 0, 7, 0}
    };

    int src;
    printf("Enter starting location (0 to %d): ", V - 1);
    scanf("%d", &src);

    dijkstra(graph, src);
    return 0;
}
OUTPUT:
Enter starting location (0 to 4): 0
Location	Distance from Source
0		0
1		7
2		10
3		14
4		5
