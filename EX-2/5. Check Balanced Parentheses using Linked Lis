#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    char bracket;
    struct Node* next;
} Node;

Node* top = NULL;

void push(char bracket) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->bracket = bracket;
    newNode->next = top;
    top = newNode;
}

void pop() {
    if (top != NULL) {
        Node* temp = top;
        top = top->next;
        free(temp);
    }
}

int isBalanced(char *expression) {
    for (int i = 0; expression[i] != '\0'; i++) {
        if (expression[i] == '(' || expression[i] == '{' || expression[i] == '[') {
            push(expression[i]);
        } else if (expression[i] == ')' || expression[i] == '}' || expression[i] == ']') {
            if (top == NULL) {
                return 0; // Unbalanced
            }
            if ((expression[i] == ')' && top->bracket == '(') ||
                (expression[i] == '}' && top->bracket == '{') ||
                (expression[i] == ']' && top->bracket == '[')) {
                pop();
            } else {
                return 0; // Unbalanced
            }
        }
    }
    return top == NULL; // If stack is empty, it's balanced
}

int main() {
    char expression[] = "{[()]}";
    if (isBalanced(expression)) {
        printf("The expression is balanced.\n");
    } else {
        printf("The expression is not balanced.\n");
    }
    return 0;
}
OUTPUT:
The expression is balanced.
